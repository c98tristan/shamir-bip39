import { recoverHex } from '../src/recoverHex';

describe('recovering knonw secrets', () => {
  // Test case from grempe's implementation.
  // https://github.com/grempe/secrets.js/blob/14a4b682a28242b1dbe5506674b5d5f476b78dbf/spec/secrets/SecretsSpec.js#L411
  it('should recover a secret from shares generated by grempe`s implementation', () => {
    const shares = {
      '1': '11001e523b02029c58aceebead70329000',
      '2': 'eeb362b5be82beae3499f09bd7f9f19b1c',
      '3': 'd5f7e5216d716a172ebe0af46ca81684f4',
      '4': 'e1fa5670ee4c919ffd9f8c71f32a7bfbb0',
      '5': '0bd6ac05ceb3eeffcbbe251932ece37657',
      '6': '4bb52a3db02b1962ff879d32bc56de4455',
      '7': '8a5f11d20cbf8d907c1d295bbda1ee900a',
      '8': '808ff7fae45529eb13b1e9d78faeab435f',
      '9': 'f3b0585740fd80830c355fa501a8057733',
      '10': 'eca744ec715290906c995aac371ed118c2',
    };
    const secret = recoverHex(shares);

    // Note that grempe's library prepends a 1 to the secret before splitting it
    // and removes it after recovering it.
    // This library doesn't do that, so we have added "01" to the expected
    // secret because we do not remove it from the result.
    expect(secret).toBe('0182585c749a3db7f73009d0d6107dd650');
  });
});
